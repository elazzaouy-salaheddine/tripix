"""
Django settings for core project.
Generated by 'django-admin startproject' using Django 5.2.1.
"""

from pathlib import Path
from decouple import config, Csv
import os
# BASE DIRECTORIES
BASE_DIR = Path(__file__).resolve().parent.parent

# CUSTOM BOOLEAN CASTING FUNCTION
def str_to_bool(value):
    """Convert string to boolean, handling common string representations."""
    if isinstance(value, bool):
        return value
    if isinstance(value, str):
        return value.lower().strip() in ('true', '1', 'yes', 'on')
    return bool(value)

# SECURITY SETTINGS
SECRET_KEY = config("SECRET_KEY")
DEBUG = True 
ALLOWED_HOSTS = config("ALLOWED_HOSTS", cast=Csv())

# SITE CONFIGURATION
SITE_ID = 1

# APPLICATION DEFINITIONS
INSTALLED_APPS = [
    "jazzmin",

    # Django apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.sites",
    'django_extensions',
    'widget_tweaks',

    # Third-party apps
    "django_cleanup",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "ckeditor",
    "ckeditor_uploader",
    "meta",

    # Local apps
    "pages",
    "destinations",
    "blog",
    "users",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# DJANGO-ALLAUTH CONFIG
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*']
ACCOUNT_LOGIN_METHODS = ["email"]
ACCOUNT_EMAIL_VERIFICATION = "mandatory"
LOGIN_REDIRECT_URL = "/"
ACCOUNT_LOGOUT_REDIRECT_URL = "/"

# EMAIL CONFIGURATION
EMAIL_BACKEND = config("EMAIL_BACKEND", default="django.core.mail.backends.console.EmailBackend")

# MIDDLEWARE CONFIGURATION
MIDDLEWARE = [
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "allauth.account.middleware.AccountMiddleware",
    "django.middleware.gzip.GZipMiddleware",
]

# URLS & WSGI
ROOT_URLCONF = "core.urls"
WSGI_APPLICATION = "core.wsgi.application"

# TEMPLATES CONFIG
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# DATABASE CONFIGURATION
if DEBUG is False:
    # Use development database (PostgreSQL local)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": "tripix_local",
            "USER": "postgres",
            "PASSWORD": "root",
            "HOST": "127.0.0.1",
            "PORT": 5432,
        },
        "OPTIONS": {
            "CONN_MAX_AGE": 600,  # 10 minutes
            'connect_timeout': 3,
        }
    }
else:
    # Use production database from DATABASE_URL
    from urllib.parse import urlparse
    DATABASE_URL = config("DATABASE_URL")
    parsed_db_url = urlparse(DATABASE_URL)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": parsed_db_url.path.lstrip("/"),
            "USER": parsed_db_url.username,
            "PASSWORD": parsed_db_url.password,
            "HOST": parsed_db_url.hostname,
            "PORT": parsed_db_url.port or 5432,
        },
        "OPTIONS": {
            "CONN_MAX_AGE": 600,  # 10 minutes
            'connect_timeout': 3,
        }
    }

# PASSWORD VALIDATION
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# INTERNATIONALIZATION
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# DEFAULT PRIMARY KEY FIELD TYPE
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CKEDITOR CONFIGURATION
CKEDITOR_UPLOAD_PATH = "uploads/ck_editor/"
CKEDITOR_RESTRICT_BY_USER = False
CKEDITOR_REQUIRE_STAFF = False
CKEDITOR_ALLOW_NONIMAGE_FILES = False
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'toolbar_Custom': [
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink'],
            ['RemoveFormat', 'Source']
        ],
        'height': 300,
        'width': '100%',
        'skin': 'moono-lisa',
        'removePlugins': 'stylesheetparser',
        'extraPlugins': ','.join([
            'autolink',
            'autoembed',
            'embedsemantic',
            'autogrow',
        ]),
    }
}
# JAZZMIN ADMIN CONFIG
JAZZMIN_SETTINGS = {
    "show_ui_builder": True,
}
JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "accent": "accent-info",
    "navbar": "navbar-cyan navbar-dark",
    "sidebar": "sidebar-light-info",
    "theme": "litera",
    "button_classes": {
        "primary": "btn-outline-primary",
        "secondary": "btn-outline-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success",
    },
}

# # CLOUDFLARE R2 STORAGE SETTINGS
CLOUDFLARE_R2_CONFIG_OPTIONS = {
    "access_key": config("CLOUDFLARE_R2_ACCESS_KEY", default=""),
    "secret_key": config("CLOUDFLARE_R2_SECRET_KEY", default=""),
    "bucket_name": config("CLOUDFLARE_R2_BUCKET_NAME", default=""),
    "endpoint_url": config("CLOUDFLARE_R2_ENDPOINT_URL", default=""),
    "default_acl": "public-read",
    "signature_version": "s3v4",
}

STORAGES = {
    "default": {
        "BACKEND": "helpers.cloudflare.storages.MediaFilesStorage",
        "OPTIONS": CLOUDFLARE_R2_CONFIG_OPTIONS,
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}

# STATIC & MEDIA FILES
STATIC_URL = "/static/"
STATICFILES_DIRS = [BASE_DIR / "static"]
STATIC_ROOT = BASE_DIR / "staticfiles"


MEDIA_URL = f"{config('CLOUDFLARE_R2_ENDPOINT_URL')}/{CLOUDFLARE_R2_CONFIG_OPTIONS['bucket_name']}/"
MEDIA_ROOT = ""  # Not needed for R2, as files are stored remotely


# ENVIRONMENT-SPECIFIC OVERRIDES
# Settings are now handled via .env file

# DEBUG OUTPUT
print(f"DEBUG is set to: {DEBUG}")
print(f"ALLOWED_HOSTS is set to: {ALLOWED_HOSTS}")
print(f"Database: {DATABASES}")
print(f"STATIC_URL is set to: {STATIC_URL}")
print(f"MEDIA_URL is set to: {MEDIA_URL}")